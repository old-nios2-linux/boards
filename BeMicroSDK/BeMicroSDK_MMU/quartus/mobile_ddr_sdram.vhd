
--------------------------------------
--   Microtronix SDRAM Controller   --
--             Top Level            --
-- Generated by SOPC Builder script --
-- Build : 169/9.7.2010	    --
--------------------------------------

-----
-- Library
-----
LIBRARY ieee;
USE ieee.std_logic_1164.all;
LIBRARY mtx_sdram;
USE mtx_sdram.mtx_sdram_package.all;

-----
-- Entity
-----
ENTITY mobile_ddr_sdram IS
	PORT
	(
		CLK			: IN std_logic;

	-- Port A (random)
		AS_PORT_A_RST      : IN std_logic;
		AS_PORT_A_CLK      : IN std_logic;
		AS_PORT_A_CS       : IN std_logic;
		AS_PORT_A_RD       : IN std_logic;
		AS_PORT_A_WR       : IN std_logic;
		AS_PORT_A_ADDR     : IN std_logic_vector(24 - 1 DOWNTO 0);
		AS_PORT_A_BE       : IN std_logic_vector(4 - 1 DOWNTO 0);
		AS_PORT_A_DATA_IN  : IN std_logic_vector(32 - 1 DOWNTO 0);
		AS_PORT_A_DATA_OUT : OUT std_logic_vector(32 - 1 DOWNTO 0);
		AS_PORT_A_WAITREQ  : OUT std_logic;
	
	-- SDRAM Interface
		CKE         : OUT std_logic;
		CS          : OUT std_logic;
		WE          : OUT std_logic;
		CAS         : OUT std_logic;
		RAS         : OUT std_logic;
	
		BA          : OUT std_logic_vector(2 - 1 DOWNTO 0);
		
		A           : OUT std_logic_vector(13 - 1 DOWNTO 0);
	
		DQM         : OUT std_logic_vector(2 - 1 DOWNTO 0);
		
		DQ          : INOUT std_logic_vector(16 - 1 DOWNTO 0);
	
		WRITE_CLK   : IN std_logic;
		
		DQS         : INOUT std_logic_vector(2 - 1 DOWNTO 0);
			
		CLK_OUT_P   : OUT std_logic;
		CLK_OUT_N   : OUT std_logic
	);
			
END ENTITY mobile_ddr_sdram;

-----
-- Arhictecture
-----
ARCHITECTURE top OF mobile_ddr_sdram IS

-- Signals
SIGNAL zero			: std_logic;
SIGNAL one			: std_logic;

SIGNAL LSP_A_ADDR        : std_logic_vector(25 - 1 DOWNTO 0);
SIGNAL LSP_A_DATA_IN     : std_logic_vector(32 - 1 DOWNTO 0);
SIGNAL LSP_A_DATA_OUT    : std_logic_vector(32 - 1 DOWNTO 0);
SIGNAL LSP_A_DATA_MASK   : std_logic_vector(4 - 1 DOWNTO 0);
SIGNAL LSP_A_WRITE       : std_logic_vector(1 - 1 DOWNTO 0);
SIGNAL LSP_A_READ        : std_logic;
SIGNAL LSP_A_DIR         : std_logic;
SIGNAL LSP_A_LENGTH      : std_logic_vector(5 - 1 DOWNTO 0);
SIGNAL LSP_A_REQUEST     : std_logic;
SIGNAL LSP_A_GRANDED     : std_logic;
SIGNAL LSP_A_PREAMBLE    : std_logic;
SIGNAL LSP_A_END         : std_logic;
SIGNAL LSP_A_DATA_IN_CLK : std_logic_vector(1 - 1 DOWNTO 0);
	
SIGNAL LSP_ADDR         : std_logic_vector((1 * 25) - 1 DOWNTO 0);
SIGNAL LSP_DATA_IN      : std_logic_vector((1 * 32) - 1 DOWNTO 0);
SIGNAL LSP_DATA_OUT     : std_logic_vector(32 - 1 DOWNTO 0);
SIGNAL LSP_DATA_MASK    : std_logic_vector((1 * 4) - 1 DOWNTO 0);
SIGNAL LSP_READ         : std_logic_vector(1 - 1 DOWNTO 0);
SIGNAL LSP_WRITE        : std_logic_vector((1 * 1) - 1 DOWNTO 0);
SIGNAL LSP_DIR          : std_logic_vector(1 - 1 DOWNTO 0);
SIGNAL LSP_LENGTH       : std_logic_vector((1 * 5) - 1 DOWNTO 0);
SIGNAL LSP_REQUEST      : std_logic_vector(1 - 1 DOWNTO 0);
SIGNAL LSP_GRANDED      : std_logic_vector(1 - 1 DOWNTO 0);
SIGNAL LSP_PREAMBLE     : std_logic_vector(1 - 1 DOWNTO 0);
SIGNAL LSP_END          : std_logic_vector(1 - 1 DOWNTO 0);
SIGNAL LSP_DATA_OUT_CLK : std_logic_vector(1 - 1 DOWNTO 0);
SIGNAL LSP_READY        : std_logic;
	

BEGIN

zero <= '0';
one  <= '1';


port_A : mtx_sdram_avalon_random
	GENERIC MAP
	(

	-- Avalon
		avalon_addr_width      => 24,
		avalon_data_width      => 32,
		avalon_data_mask_width => 4,

	-- Local SDRAM Port
		lsp_addr_width         => 25,
		lsp_data_width         => 32,
		lsp_data_mask_width    => 4,
		lsp_burst_width        => 5,
		lsp_write_clocks       => 1,
		lsp_write_data_width   => 32,

	-- buffer
		DEVICE_FAMILY          => "Cyclone IV E",
		CACHE_TOTAL_WORDS      => 16,
		CACHE_ADDR_WIDTH       => 4,
		CACHE_DISABLE          => 0
	)

	PORT MAP
	(
	-- Avalon Slave Interface
		AS_RST      => AS_PORT_A_RST,
		AS_CLK      => AS_PORT_A_CLK,
		AS_CS       => AS_PORT_A_CS,
		AS_RD       => AS_PORT_A_RD,
		AS_WR       => AS_PORT_A_WR,
		AS_ADDR     => AS_PORT_A_ADDR,
		AS_BE       => AS_PORT_A_BE,
		AS_DATA_IN  => AS_PORT_A_DATA_IN,
		AS_DATA_OUT => AS_PORT_A_DATA_OUT,
		AS_WAITREQ  => AS_PORT_A_WAITREQ,

	-- Local SDRAM Port
		LSP_CLK         => CLK,
		LSP_READY       => LSP_READY,
		LSP_ADDR        => LSP_A_ADDR,
		LSP_DIR         => LSP_A_DIR,
		LSP_LENGTH      => LSP_A_LENGTH,
		LSP_READ        => LSP_A_READ,
		LSP_WRITE       => LSP_A_WRITE,
		LSP_REQUEST     => LSP_A_REQUEST,
		LSP_GRANDED     => LSP_A_GRANDED,
		LSP_PREAMBLE    => LSP_A_PREAMBLE,
		LSP_END         => LSP_A_END,
		LSP_DATA_IN     => LSP_A_DATA_IN,
		LSP_DATA_OUT    => LSP_A_DATA_OUT,
		LSP_DATA_MASK   => LSP_A_DATA_MASK,
		LSP_DATA_IN_CLK => LSP_A_DATA_IN_CLK
	);
	
sdram : mtx_sdram_controller
	GENERIC MAP
	(

	-- Local SDRAM Port
		lsp_addr_width               => 25,
		lsp_data_width               => 32,
		lsp_data_mask_width          => 4,
		lsp_burst_width              => 5,
		lsp_total_ports              => 1,

	-- SDRAM Settings
		sdram_architecture           => 3,
		sdram_scheduler_parameter    => 0,
		sdram_data_strobe_width      => 2,
		sdram_data_group_width       => 8,
		sdram_max_burst_length       => 16,
		sdram_cas_latency            => 3,
		sdram_dqs_delay              => "0",
		sdram_dqs_filter             => 6,
		sdram_devices                => 1,
		sdram_clock_pairs            => 1,
		sdram_dqs_per_device         => 2,
		sdram_differential_dqs       => 0,
		sdram_reduced_drive_strength => 1,
		sdram_command_clock          => 0,
		sdram_odt_value              => 0,
		sdram_disable_ddr_blocks     => 0,

		sdram_linear_addr_width      => 25,
		sdram_addr_width             => 13,
		sdram_data_width             => 16,
		sdram_data_mask_width        => 2,
		sdram_bank_addr_width        => 2,
		sdram_bank_addr_high         => 24,
		sdram_bank_addr_low          => 23,
		sdram_row_addr_width         => 13,
		sdram_row_addr_high          => 22,
		sdram_row_addr_low           => 10,
		sdram_column_addr_width      => 10,
		sdram_column_addr_high       => 9,
		sdram_column_addr_low        => 0,

		sdram_oe_latency             => 4,
		sdram_cmd_latency            => 3,
		sdram_read_latency           => 7,
		sdram_write_data_delay       => 1,

		device_family                => "Cyclone IV E",
		stx2_dll_frequency           => "0",
		stx2_dll_chain_length        => 0,
		stx2_dll_buffer_mode         => "0",
		stx2_dll_out_mode            => "0",

	-- SDRAM Timing
		tINIT                        => 27000,
		tRP                          => 0,
		tMRD                         => 0,
		tRFC                         => 7,
		tREFI                        => 1038,
		tRCD                         => 0,
		tWR                          => 0,
		tRAS                         => 3,
		tRC                          => 5
	)

	PORT MAP
	(
		RST                 => AS_PORT_A_RST,
		SDRAM_CLK           => CLK,
	
		SDRAM_CMD_CLK       => zero,
		
	-- Local SDRAM Port (LSP)
		LSP_ADDR            => LSP_ADDR,
		LSP_DIR             => LSP_DIR,
		LSP_READ            => LSP_READ,
		LSP_WRITE           => LSP_WRITE,
		LSP_LENGTH          => LSP_LENGTH,
		LSP_REQUEST         => LSP_REQUEST,
		LSP_GRANDED         => LSP_GRANDED,
		LSP_PREAMBLE        => LSP_PREAMBLE,
		LSP_END             => LSP_END,
		LSP_DATA_IN         => LSP_DATA_IN,
		LSP_DATA_OUT        => LSP_DATA_OUT,
		LSP_DATA_MASK       => LSP_DATA_MASK,
		LSP_DATA_OUT_CLK    => LSP_DATA_OUT_CLK,
		LSP_READY           => LSP_READY,

	
		-- CONTROL
		CONTROL_DPD         => zero,
		CONTROL_POWER_STATE => open,

		
	-- SDRAM Interface
		SDRAM_CKE           => CKE,
		SDRAM_CS            => CS,
		SDRAM_WE            => WE,
		SDRAM_CAS           => CAS,
		SDRAM_RAS           => RAS,
	
		SDRAM_BA            => BA,
		
		SDRAM_A             => A,
	
		SDRAM_DQM           => DQM,
		
		SDRAM_DQ            => DQ,
	
	-- SDR
		SDRAM_CAPTURE_CLK   => zero,

	-- DDR
		SDRAM_WRITE_CLK     => WRITE_CLK,
		
		SDRAM_DQS_P         => DQS,
			
		SDRAM_DQS_N         => open,
		SDRAM_ODT           => open,
		
		SDRAM_CLK_OUT_P(0)  => CLK_OUT_P,
		SDRAM_CLK_OUT_N(0)  => CLK_OUT_N
	);
			

	LSP_ADDR        <= LSP_A_ADDR;
	LSP_DATA_IN     <= LSP_A_DATA_OUT;
	LSP_DATA_MASK   <= LSP_A_DATA_MASK;
	LSP_LENGTH      <= LSP_A_LENGTH;

	LSP_A_DATA_IN     <= LSP_DATA_OUT;
	LSP_A_READ        <= LSP_READ(0);
	LSP_A_WRITE       <= LSP_WRITE(0 DOWNTO 0);
	LSP_A_END         <= LSP_END(0);
	LSP_A_PREAMBLE    <= LSP_PREAMBLE(0);
	LSP_A_GRANDED     <= LSP_GRANDED(0);
	LSP_A_DATA_IN_CLK <= LSP_DATA_OUT_CLK;
	LSP_REQUEST(0)    <= LSP_A_REQUEST;
	LSP_DIR(0)        <= LSP_A_DIR;
	
END ARCHITECTURE top;
