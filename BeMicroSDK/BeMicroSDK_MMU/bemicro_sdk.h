#ifndef _ALTERA_BEMICRO_SDK_H_
#define _ALTERA_BEMICRO_SDK_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'nios2_bemicro_sopc' in
 * file './nios2_bemicro_sopc.sopcinfo'.
 */

/*
 * This file contains macros for module 'cpu_0' and devices
 * connected to the following masters:
 *   instruction_master
 *   tightly_coupled_instruction_master_0
 *   data_master
 *   tightly_coupled_data_master_0
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for module 'cpu_0', class 'altera_nios2'.
 * The macros have no prefix.
 */
#define CPU_IMPLEMENTATION "fast"
#define BIG_ENDIAN 0
#define CPU_FREQ 100000000
#define ICACHE_LINE_SIZE 32
#define ICACHE_LINE_SIZE_LOG2 5
#define ICACHE_SIZE 8192
#define DCACHE_LINE_SIZE 32
#define DCACHE_LINE_SIZE_LOG2 5
#define DCACHE_SIZE 4096
#define INITDA_SUPPORTED 
#define FLUSHDA_SUPPORTED 
#define HAS_JMPI_INSTRUCTION 
#define MMU_PRESENT 
#define KERNEL_REGION_BASE 0xc0000000
#define IO_REGION_BASE 0xe0000000
#define KERNEL_MMU_REGION_BASE 0x80000000
#define USER_REGION_BASE 0x0
#define PROCESS_ID_NUM_BITS 8
#define TLB_NUM_WAYS 16
#define TLB_NUM_WAYS_LOG2 4
#define TLB_PTR_SZ 8
#define TLB_NUM_ENTRIES 256
#define FAST_TLB_MISS_EXCEPTION_ADDR 0xc0002000
#define EXCEPTION_ADDR 0xd0000020
#define RESET_ADDR 0xc880a000
#define BREAK_ADDR 0xc0001820
#define HAS_DEBUG_STUB 
#define HAS_DEBUG_CORE 1
#define HAS_ILLEGAL_INSTRUCTION_EXCEPTION 
#define HAS_ILLEGAL_MEMORY_ACCESS_EXCEPTION 
#define HAS_DIVISION_ERROR_EXCEPTION 
#define HAS_EXTRA_EXCEPTION_INFO 
#define CPU_ID_SIZE 1
#define CPU_ID_VALUE 0x0
#define HARDWARE_DIVIDE_PRESENT 1
#define HARDWARE_MULTIPLY_PRESENT 1
#define HARDWARE_MULX_PRESENT 0
#define INST_ADDR_WIDTH 29
#define DATA_ADDR_WIDTH 29
#define NUM_OF_SHADOW_REG_SETS 0

/*
 * Macros for device 'mmc_spi', class 'altera_avalon_spi'
 * The macros are prefixed with 'MMC_SPI_'.
 * The prefix is the slave descriptor.
 */
#define MMC_SPI_COMPONENT_TYPE altera_avalon_spi
#define MMC_SPI_COMPONENT_NAME mmc_spi
#define MMC_SPI_BASE 0x0
#define MMC_SPI_SPAN 32
#define MMC_SPI_END 0x1f
#define MMC_SPI_IRQ 10
#define MMC_SPI_DATABITS 8
#define MMC_SPI_DATAWIDTH 16
#define MMC_SPI_TARGETCLOCK 20000000
#define MMC_SPI_CLOCKUNITS "Hz"
#define MMC_SPI_CLOCKMULT 1
#define MMC_SPI_NUMSLAVES 1
#define MMC_SPI_ISMASTER 1
#define MMC_SPI_CLOCKPOLARITY 0
#define MMC_SPI_CLOCKPHASE 0
#define MMC_SPI_LSBFIRST 0
#define MMC_SPI_EXTRADELAY 0
#define MMC_SPI_INSERT_SYNC 0
#define MMC_SPI_SYNC_REG_DEPTH 2
#define MMC_SPI_TARGETSSDELAY "0.0"
#define MMC_SPI_DELAYUNITS "ns"
#define MMC_SPI_DELAYMULT "1.0E-9"
#define MMC_SPI_PREFIX "spi_"

/*
 * Macros for device 'flash', class 'altera_avalon_onchip_memory2'
 * The macros are prefixed with 'FLASH_'.
 * The prefix is the slave descriptor.
 */
#define FLASH_COMPONENT_TYPE altera_avalon_onchip_memory2
#define FLASH_COMPONENT_NAME flash
#define FLASH_BASE 0x1000
#define FLASH_SPAN 1024
#define FLASH_END 0x13ff
#define FLASH_ALLOW_MRAM_SIM_CONTENTS_ONLY_FILE 0
#define FLASH_INIT_CONTENTS_FILE "flash"
#define FLASH_NON_DEFAULT_INIT_FILE_ENABLED 0
#define FLASH_GUI_RAM_BLOCK_TYPE "Automatic"
#define FLASH_WRITABLE 1
#define FLASH_DUAL_PORT 0
#define FLASH_SIZE_VALUE 1024
#define FLASH_SIZE_MULTIPLE 1
#define FLASH_CONTENTS_INFO ""
#define FLASH_RAM_BLOCK_TYPE "Auto"
#define FLASH_INIT_MEM_CONTENT 1
#define FLASH_ALLOW_IN_SYSTEM_MEMORY_CONTENT_EDITOR 0
#define FLASH_INSTANCE_ID "NONE"
#define FLASH_READ_DURING_WRITE_MODE "DONT_CARE"
#define FLASH_MEMORY_INFO_MEM_INIT_DATA_WIDTH 32
#define FLASH_MEMORY_INFO_HAS_BYTE_LANE 0
#define FLASH_MEMORY_INFO_GENERATE_HEX 1
#define FLASH_MEMORY_INFO_HEX_INSTALL_DIR QPF_DIR
#define FLASH_MEMORY_INFO_GENERATE_DAT_SYM 1
#define FLASH_MEMORY_INFO_DAT_SYM_INSTALL_DIR SIM_DIR

/*
 * Macros for device 'fast_tlb_miss_memory', class 'altera_avalon_onchip_memory2'
 * The macros are prefixed with 'FAST_TLB_MISS_MEMORY_'.
 * The prefix is the slave descriptor.
 */
#define FAST_TLB_MISS_MEMORY_COMPONENT_TYPE altera_avalon_onchip_memory2
#define FAST_TLB_MISS_MEMORY_COMPONENT_NAME fast_tlb_miss_memory
#define FAST_TLB_MISS_MEMORY_BASE 0x2000
#define FAST_TLB_MISS_MEMORY_SPAN 4096
#define FAST_TLB_MISS_MEMORY_END 0x2fff
#define FAST_TLB_MISS_MEMORY_ALLOW_MRAM_SIM_CONTENTS_ONLY_FILE 0
#define FAST_TLB_MISS_MEMORY_INIT_CONTENTS_FILE "fast_tlb_miss_memory"
#define FAST_TLB_MISS_MEMORY_NON_DEFAULT_INIT_FILE_ENABLED 0
#define FAST_TLB_MISS_MEMORY_GUI_RAM_BLOCK_TYPE "Automatic"
#define FAST_TLB_MISS_MEMORY_WRITABLE 1
#define FAST_TLB_MISS_MEMORY_DUAL_PORT 1
#define FAST_TLB_MISS_MEMORY_SIZE_VALUE 4096
#define FAST_TLB_MISS_MEMORY_SIZE_MULTIPLE 1
#define FAST_TLB_MISS_MEMORY_CONTENTS_INFO ""
#define FAST_TLB_MISS_MEMORY_RAM_BLOCK_TYPE "Auto"
#define FAST_TLB_MISS_MEMORY_INIT_MEM_CONTENT 1
#define FAST_TLB_MISS_MEMORY_ALLOW_IN_SYSTEM_MEMORY_CONTENT_EDITOR 0
#define FAST_TLB_MISS_MEMORY_INSTANCE_ID "NONE"
#define FAST_TLB_MISS_MEMORY_READ_DURING_WRITE_MODE "DONT_CARE"
#define FAST_TLB_MISS_MEMORY_MEMORY_INFO_MEM_INIT_DATA_WIDTH 32
#define FAST_TLB_MISS_MEMORY_MEMORY_INFO_HAS_BYTE_LANE 0
#define FAST_TLB_MISS_MEMORY_MEMORY_INFO_GENERATE_HEX 1
#define FAST_TLB_MISS_MEMORY_MEMORY_INFO_HEX_INSTALL_DIR QPF_DIR
#define FAST_TLB_MISS_MEMORY_MEMORY_INFO_GENERATE_DAT_SYM 1
#define FAST_TLB_MISS_MEMORY_MEMORY_INFO_DAT_SYM_INSTALL_DIR SIM_DIR

/*
 * Macros for device 'descriptor_memory', class 'altera_avalon_onchip_memory2'
 * The macros are prefixed with 'DESCRIPTOR_MEMORY_'.
 * The prefix is the slave descriptor.
 */
#define DESCRIPTOR_MEMORY_COMPONENT_TYPE altera_avalon_onchip_memory2
#define DESCRIPTOR_MEMORY_COMPONENT_NAME descriptor_memory
#define DESCRIPTOR_MEMORY_BASE 0x8000000
#define DESCRIPTOR_MEMORY_SPAN 4096
#define DESCRIPTOR_MEMORY_END 0x8000fff
#define DESCRIPTOR_MEMORY_ALLOW_MRAM_SIM_CONTENTS_ONLY_FILE 0
#define DESCRIPTOR_MEMORY_INIT_CONTENTS_FILE "descriptor_memory"
#define DESCRIPTOR_MEMORY_NON_DEFAULT_INIT_FILE_ENABLED 0
#define DESCRIPTOR_MEMORY_GUI_RAM_BLOCK_TYPE "Automatic"
#define DESCRIPTOR_MEMORY_WRITABLE 1
#define DESCRIPTOR_MEMORY_DUAL_PORT 0
#define DESCRIPTOR_MEMORY_SIZE_VALUE 4096
#define DESCRIPTOR_MEMORY_SIZE_MULTIPLE 1
#define DESCRIPTOR_MEMORY_CONTENTS_INFO ""
#define DESCRIPTOR_MEMORY_RAM_BLOCK_TYPE "Auto"
#define DESCRIPTOR_MEMORY_INIT_MEM_CONTENT 1
#define DESCRIPTOR_MEMORY_ALLOW_IN_SYSTEM_MEMORY_CONTENT_EDITOR 0
#define DESCRIPTOR_MEMORY_INSTANCE_ID "NONE"
#define DESCRIPTOR_MEMORY_READ_DURING_WRITE_MODE "DONT_CARE"
#define DESCRIPTOR_MEMORY_MEMORY_INFO_MEM_INIT_DATA_WIDTH 32
#define DESCRIPTOR_MEMORY_MEMORY_INFO_HAS_BYTE_LANE 0
#define DESCRIPTOR_MEMORY_MEMORY_INFO_GENERATE_HEX 1
#define DESCRIPTOR_MEMORY_MEMORY_INFO_HEX_INSTALL_DIR QPF_DIR
#define DESCRIPTOR_MEMORY_MEMORY_INFO_GENERATE_DAT_SYM 1
#define DESCRIPTOR_MEMORY_MEMORY_INFO_DAT_SYM_INSTALL_DIR SIM_DIR

/*
 * Macros for device 'sgdma_tx', class 'altera_avalon_sgdma'
 * The macros are prefixed with 'SGDMA_TX_'.
 * The prefix is the slave descriptor.
 */
#define SGDMA_TX_COMPONENT_TYPE altera_avalon_sgdma
#define SGDMA_TX_COMPONENT_NAME sgdma_tx
#define SGDMA_TX_BASE 0x8001000
#define SGDMA_TX_SPAN 64
#define SGDMA_TX_END 0x800103f
#define SGDMA_TX_IRQ 1
#define SGDMA_TX_READ_BLOCK_DATA_WIDTH 32
#define SGDMA_TX_WRITE_BLOCK_DATA_WIDTH 32
#define SGDMA_TX_STREAM_DATA_WIDTH 32
#define SGDMA_TX_ADDRESS_WIDTH 32
#define SGDMA_TX_HAS_READ_BLOCK 1
#define SGDMA_TX_HAS_WRITE_BLOCK 0
#define SGDMA_TX_READ_BURSTCOUNT_WIDTH 4
#define SGDMA_TX_WRITE_BURSTCOUNT_WIDTH 4
#define SGDMA_TX_BURST_TRANSFER 0
#define SGDMA_TX_ALWAYS_DO_MAX_BURST 1
#define SGDMA_TX_DESCRIPTOR_READ_BURST 0
#define SGDMA_TX_UNALIGNED_TRANSFER 0
#define SGDMA_TX_CONTROL_SLAVE_DATA_WIDTH 32
#define SGDMA_TX_CONTROL_SLAVE_ADDRESS_WIDTH 4
#define SGDMA_TX_DESC_DATA_WIDTH 32
#define SGDMA_TX_CHAIN_WRITEBACK_DATA_WIDTH 32
#define SGDMA_TX_STATUS_TOKEN_DATA_WIDTH 24
#define SGDMA_TX_BYTES_TO_TRANSFER_DATA_WIDTH 16
#define SGDMA_TX_BURST_DATA_WIDTH 8
#define SGDMA_TX_CONTROL_DATA_WIDTH 8
#define SGDMA_TX_ATLANTIC_CHANNEL_DATA_WIDTH 4
#define SGDMA_TX_COMMAND_FIFO_DATA_WIDTH 104
#define SGDMA_TX_SYMBOLS_PER_BEAT 4
#define SGDMA_TX_IN_ERROR_WIDTH 0
#define SGDMA_TX_OUT_ERROR_WIDTH 1

/*
 * Macros for device 'mobile_ddr_sdram', class 'mtx_avalon_sdram'
 * Path to the device is from the master group 'sgdma_tx_m_read'.
 * The macros are prefixed with 'SGDMA_TX_M_READ_MOBILE_DDR_SDRAM_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_TX_M_READ_MOBILE_DDR_SDRAM_COMPONENT_TYPE mtx_avalon_sdram
#define SGDMA_TX_M_READ_MOBILE_DDR_SDRAM_COMPONENT_NAME mobile_ddr_sdram
#define SGDMA_TX_M_READ_MOBILE_DDR_SDRAM_BASE 0x10000000
#define SGDMA_TX_M_READ_MOBILE_DDR_SDRAM_SPAN 67108864
#define SGDMA_TX_M_READ_MOBILE_DDR_SDRAM_END 0x13ffffff

/*
 * Macros for device 'tse_mac', class 'triple_speed_ethernet'
 * The macros are prefixed with 'TSE_MAC_'.
 * The prefix is the slave descriptor.
 */
#define TSE_MAC_COMPONENT_TYPE triple_speed_ethernet
#define TSE_MAC_COMPONENT_NAME tse_mac
#define TSE_MAC_BASE 0x8002000
#define TSE_MAC_SPAN 1024
#define TSE_MAC_END 0x80023ff
#define TSE_MAC_UNASSIGNED "unassigned"
#define TSE_MAC_TRANSMIT_FIFO_DEPTH 1024
#define TSE_MAC_RECEIVE_FIFO_DEPTH 1024
#define TSE_MAC_FIFO_WIDTH 32
#define TSE_MAC_ENABLE_MACLITE 0
#define TSE_MAC_MACLITE_GIGE 0
#define TSE_MAC_USE_MDIO 1
#define TSE_MAC_NUMBER_OF_CHANNEL 1
#define TSE_MAC_NUMBER_OF_MAC_MDIO_SHARED 1
#define TSE_MAC_IS_MULTICHANNEL_MAC 0
#define TSE_MAC_MDIO_SHARED 0
#define TSE_MAC_REGISTER_SHARED 0
#define TSE_MAC_PCS 0
#define TSE_MAC_PCS_SGMII 0
#define TSE_MAC_PCS_ID 0

/*
 * Macros for device 'sgdma_rx', class 'altera_avalon_sgdma'
 * The macros are prefixed with 'SGDMA_RX_'.
 * The prefix is the slave descriptor.
 */
#define SGDMA_RX_COMPONENT_TYPE altera_avalon_sgdma
#define SGDMA_RX_COMPONENT_NAME sgdma_rx
#define SGDMA_RX_BASE 0x8003000
#define SGDMA_RX_SPAN 64
#define SGDMA_RX_END 0x800303f
#define SGDMA_RX_IRQ 2
#define SGDMA_RX_READ_BLOCK_DATA_WIDTH 32
#define SGDMA_RX_WRITE_BLOCK_DATA_WIDTH 32
#define SGDMA_RX_STREAM_DATA_WIDTH 32
#define SGDMA_RX_ADDRESS_WIDTH 32
#define SGDMA_RX_HAS_READ_BLOCK 0
#define SGDMA_RX_HAS_WRITE_BLOCK 1
#define SGDMA_RX_READ_BURSTCOUNT_WIDTH 4
#define SGDMA_RX_WRITE_BURSTCOUNT_WIDTH 4
#define SGDMA_RX_BURST_TRANSFER 0
#define SGDMA_RX_ALWAYS_DO_MAX_BURST 1
#define SGDMA_RX_DESCRIPTOR_READ_BURST 0
#define SGDMA_RX_UNALIGNED_TRANSFER 0
#define SGDMA_RX_CONTROL_SLAVE_DATA_WIDTH 32
#define SGDMA_RX_CONTROL_SLAVE_ADDRESS_WIDTH 4
#define SGDMA_RX_DESC_DATA_WIDTH 32
#define SGDMA_RX_CHAIN_WRITEBACK_DATA_WIDTH 32
#define SGDMA_RX_STATUS_TOKEN_DATA_WIDTH 24
#define SGDMA_RX_BYTES_TO_TRANSFER_DATA_WIDTH 16
#define SGDMA_RX_BURST_DATA_WIDTH 8
#define SGDMA_RX_CONTROL_DATA_WIDTH 8
#define SGDMA_RX_ATLANTIC_CHANNEL_DATA_WIDTH 4
#define SGDMA_RX_COMMAND_FIFO_DATA_WIDTH 104
#define SGDMA_RX_SYMBOLS_PER_BEAT 4
#define SGDMA_RX_IN_ERROR_WIDTH 6
#define SGDMA_RX_OUT_ERROR_WIDTH 0

/*
 * Macros for device 'mobile_ddr_sdram', class 'mtx_avalon_sdram'
 * Path to the device is from the master group 'sgdma_rx_m_write'.
 * The macros are prefixed with 'SGDMA_RX_M_WRITE_MOBILE_DDR_SDRAM_'.
 * The prefix is the master group descriptor and the slave descriptor.
 */
#define SGDMA_RX_M_WRITE_MOBILE_DDR_SDRAM_COMPONENT_TYPE mtx_avalon_sdram
#define SGDMA_RX_M_WRITE_MOBILE_DDR_SDRAM_COMPONENT_NAME mobile_ddr_sdram
#define SGDMA_RX_M_WRITE_MOBILE_DDR_SDRAM_BASE 0x10000000
#define SGDMA_RX_M_WRITE_MOBILE_DDR_SDRAM_SPAN 67108864
#define SGDMA_RX_M_WRITE_MOBILE_DDR_SDRAM_END 0x13ffffff

/*
 * Macros for device 'sys_timer', class 'altera_avalon_timer'
 * The macros are prefixed with 'SYS_TIMER_'.
 * The prefix is the slave descriptor.
 */
#define SYS_TIMER_COMPONENT_TYPE altera_avalon_timer
#define SYS_TIMER_COMPONENT_NAME sys_timer
#define SYS_TIMER_BASE 0x8801000
#define SYS_TIMER_SPAN 32
#define SYS_TIMER_END 0x880101f
#define SYS_TIMER_IRQ 3
#define SYS_TIMER_ALWAYS_RUN 0
#define SYS_TIMER_FIXED_PERIOD 0
#define SYS_TIMER_SNAPSHOT 1
#define SYS_TIMER_PERIOD 10
#define SYS_TIMER_PERIOD_UNITS "ms"
#define SYS_TIMER_RESET_OUTPUT 0
#define SYS_TIMER_TIMEOUT_PULSE_OUTPUT 0
#define SYS_TIMER_FREQ 60000000
#define SYS_TIMER_LOAD_VALUE 599999ULL
#define SYS_TIMER_COUNTER_SIZE 32
#define SYS_TIMER_MULT 0.0010
#define SYS_TIMER_TICKS_PER_SEC 100

/*
 * Macros for device 'led_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'LED_PIO_'.
 * The prefix is the slave descriptor.
 */
#define LED_PIO_COMPONENT_TYPE altera_avalon_pio
#define LED_PIO_COMPONENT_NAME led_pio
#define LED_PIO_BASE 0x8802000
#define LED_PIO_SPAN 16
#define LED_PIO_END 0x880200f
#define LED_PIO_DO_TEST_BENCH_WIRING 0
#define LED_PIO_DRIVEN_SIM_VALUE 0x0
#define LED_PIO_HAS_TRI 0
#define LED_PIO_HAS_OUT 1
#define LED_PIO_HAS_IN 0
#define LED_PIO_CAPTURE 0
#define LED_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define LED_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define LED_PIO_DATA_WIDTH 8
#define LED_PIO_RESET_VALUE 0x0
#define LED_PIO_EDGE_TYPE "NONE"
#define LED_PIO_IRQ_TYPE "NONE"
#define LED_PIO_FREQ 60000000

/*
 * Macros for device 'dipsw_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'DIPSW_PIO_'.
 * The prefix is the slave descriptor.
 */
#define DIPSW_PIO_COMPONENT_TYPE altera_avalon_pio
#define DIPSW_PIO_COMPONENT_NAME dipsw_pio
#define DIPSW_PIO_BASE 0x8803000
#define DIPSW_PIO_SPAN 16
#define DIPSW_PIO_END 0x880300f
#define DIPSW_PIO_DO_TEST_BENCH_WIRING 1
#define DIPSW_PIO_DRIVEN_SIM_VALUE 0x3
#define DIPSW_PIO_HAS_TRI 0
#define DIPSW_PIO_HAS_OUT 0
#define DIPSW_PIO_HAS_IN 1
#define DIPSW_PIO_CAPTURE 1
#define DIPSW_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define DIPSW_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define DIPSW_PIO_DATA_WIDTH 2
#define DIPSW_PIO_RESET_VALUE 0x0
#define DIPSW_PIO_EDGE_TYPE "ANY"
#define DIPSW_PIO_IRQ_TYPE "NONE"
#define DIPSW_PIO_FREQ 60000000

/*
 * Macros for device 'user_pio_pushbtn', class 'altera_avalon_pio'
 * The macros are prefixed with 'USER_PIO_PUSHBTN_'.
 * The prefix is the slave descriptor.
 */
#define USER_PIO_PUSHBTN_COMPONENT_TYPE altera_avalon_pio
#define USER_PIO_PUSHBTN_COMPONENT_NAME user_pio_pushbtn
#define USER_PIO_PUSHBTN_BASE 0x8804000
#define USER_PIO_PUSHBTN_SPAN 16
#define USER_PIO_PUSHBTN_END 0x880400f
#define USER_PIO_PUSHBTN_IRQ 7
#define USER_PIO_PUSHBTN_DO_TEST_BENCH_WIRING 1
#define USER_PIO_PUSHBTN_DRIVEN_SIM_VALUE 0x1
#define USER_PIO_PUSHBTN_HAS_TRI 0
#define USER_PIO_PUSHBTN_HAS_OUT 0
#define USER_PIO_PUSHBTN_HAS_IN 1
#define USER_PIO_PUSHBTN_CAPTURE 1
#define USER_PIO_PUSHBTN_BIT_CLEARING_EDGE_REGISTER 0
#define USER_PIO_PUSHBTN_BIT_MODIFYING_OUTPUT_REGISTER 0
#define USER_PIO_PUSHBTN_DATA_WIDTH 1
#define USER_PIO_PUSHBTN_RESET_VALUE 0x0
#define USER_PIO_PUSHBTN_EDGE_TYPE "FALLING"
#define USER_PIO_PUSHBTN_IRQ_TYPE "EDGE"
#define USER_PIO_PUSHBTN_FREQ 60000000

/*
 * Macros for device 'jtag_uart', class 'altera_avalon_jtag_uart'
 * The macros are prefixed with 'JTAG_UART_'.
 * The prefix is the slave descriptor.
 */
#define JTAG_UART_COMPONENT_TYPE altera_avalon_jtag_uart
#define JTAG_UART_COMPONENT_NAME jtag_uart
#define JTAG_UART_BASE 0x8805000
#define JTAG_UART_SPAN 8
#define JTAG_UART_END 0x8805007
#define JTAG_UART_IRQ 5
#define JTAG_UART_WRITE_DEPTH 64
#define JTAG_UART_READ_DEPTH 64
#define JTAG_UART_WRITE_THRESHOLD 8
#define JTAG_UART_READ_THRESHOLD 8

/*
 * Macros for device 'sysid', class 'altera_avalon_sysid'
 * The macros are prefixed with 'SYSID_'.
 * The prefix is the slave descriptor.
 */
#define SYSID_COMPONENT_TYPE altera_avalon_sysid
#define SYSID_COMPONENT_NAME sysid
#define SYSID_BASE 0x8806000
#define SYSID_SPAN 8
#define SYSID_END 0x8806007
#define SYSID_ID 0
#define SYSID_TIMESTAMP 1297813859

/*
 * Macros for device 'nENET_reg_reset', class 'altera_avalon_pio'
 * The macros are prefixed with 'NENET_REG_RESET_'.
 * The prefix is the slave descriptor.
 */
#define NENET_REG_RESET_COMPONENT_TYPE altera_avalon_pio
#define NENET_REG_RESET_COMPONENT_NAME nENET_reg_reset
#define NENET_REG_RESET_BASE 0x8807000
#define NENET_REG_RESET_SPAN 16
#define NENET_REG_RESET_END 0x880700f
#define NENET_REG_RESET_DO_TEST_BENCH_WIRING 0
#define NENET_REG_RESET_DRIVEN_SIM_VALUE 0x0
#define NENET_REG_RESET_HAS_TRI 0
#define NENET_REG_RESET_HAS_OUT 1
#define NENET_REG_RESET_HAS_IN 0
#define NENET_REG_RESET_CAPTURE 0
#define NENET_REG_RESET_BIT_CLEARING_EDGE_REGISTER 0
#define NENET_REG_RESET_BIT_MODIFYING_OUTPUT_REGISTER 0
#define NENET_REG_RESET_DATA_WIDTH 1
#define NENET_REG_RESET_RESET_VALUE 0x1
#define NENET_REG_RESET_EDGE_TYPE "NONE"
#define NENET_REG_RESET_IRQ_TYPE "NONE"
#define NENET_REG_RESET_FREQ 60000000

/*
 * Macros for device 'product_info_0', class 'product_info'
 * The macros are prefixed with 'PRODUCT_INFO_0_'.
 * The prefix is the slave descriptor.
 */
#define PRODUCT_INFO_0_COMPONENT_TYPE product_info
#define PRODUCT_INFO_0_COMPONENT_NAME product_info_0
#define PRODUCT_INFO_0_BASE 0x8808000
#define PRODUCT_INFO_0_SPAN 16
#define PRODUCT_INFO_0_END 0x880800f

/*
 * Macros for device 'remote_update_blk', class 'altera_avalon_remote_update_cycloneiii'
 * The macros are prefixed with 'REMOTE_UPDATE_BLK_'.
 * The prefix is the slave descriptor.
 */
#define REMOTE_UPDATE_BLK_COMPONENT_TYPE altera_avalon_remote_update_cycloneiii
#define REMOTE_UPDATE_BLK_COMPONENT_NAME remote_update_blk
#define REMOTE_UPDATE_BLK_BASE 0x8809000
#define REMOTE_UPDATE_BLK_SPAN 256
#define REMOTE_UPDATE_BLK_END 0x88090ff

/*
 * Macros for device 'epcs_flash_controller', class 'altera_avalon_epcs_flash_controller'
 * The macros are prefixed with 'EPCS_FLASH_CONTROLLER_'.
 * The prefix is the slave descriptor.
 */
#define EPCS_FLASH_CONTROLLER_COMPONENT_TYPE altera_avalon_epcs_flash_controller
#define EPCS_FLASH_CONTROLLER_COMPONENT_NAME epcs_flash_controller
#define EPCS_FLASH_CONTROLLER_BASE 0x880a000
#define EPCS_FLASH_CONTROLLER_SPAN 2048
#define EPCS_FLASH_CONTROLLER_END 0x880a7ff
#define EPCS_FLASH_CONTROLLER_IRQ 11
#define EPCS_FLASH_CONTROLLER_REGISTER_OFFSET 1024
#define EPCS_FLASH_CONTROLLER_MEMORY_INFO_MEM_INIT_DATA_WIDTH 32
#define EPCS_FLASH_CONTROLLER_MEMORY_INFO_MEM_INIT_FILENAME epcs_flash_controller_boot_rom
#define EPCS_FLASH_CONTROLLER_MEMORY_INFO_IS_EPCS 1
#define EPCS_FLASH_CONTROLLER_MEMORY_INFO_IS_FLASH 1
#define EPCS_FLASH_CONTROLLER_MEMORY_INFO_GENERATE_HEX 1
#define EPCS_FLASH_CONTROLLER_MEMORY_INFO_GENERATE_DAT_SYM 1
#define EPCS_FLASH_CONTROLLER_MEMORY_INFO_GENERATE_FLASH 1
#define EPCS_FLASH_CONTROLLER_MEMORY_INFO_HEX_INSTALL_DIR SIM_DIR
#define EPCS_FLASH_CONTROLLER_MEMORY_INFO_DAT_SYM_INSTALL_DIR SIM_DIR
#define EPCS_FLASH_CONTROLLER_MEMORY_INFO_FLASH_INSTALL_DIR APP_DIR

/*
 * Macros for device 'EC_GPIO_1', class 'altera_avalon_pio'
 * The macros are prefixed with 'EC_GPIO_1_'.
 * The prefix is the slave descriptor.
 */
#define EC_GPIO_1_COMPONENT_TYPE altera_avalon_pio
#define EC_GPIO_1_COMPONENT_NAME EC_GPIO_1
#define EC_GPIO_1_BASE 0x880b000
#define EC_GPIO_1_SPAN 16
#define EC_GPIO_1_END 0x880b00f
#define EC_GPIO_1_DO_TEST_BENCH_WIRING 0
#define EC_GPIO_1_DRIVEN_SIM_VALUE 0x0
#define EC_GPIO_1_HAS_TRI 0
#define EC_GPIO_1_HAS_OUT 0
#define EC_GPIO_1_HAS_IN 1
#define EC_GPIO_1_CAPTURE 0
#define EC_GPIO_1_BIT_CLEARING_EDGE_REGISTER 0
#define EC_GPIO_1_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EC_GPIO_1_DATA_WIDTH 32
#define EC_GPIO_1_RESET_VALUE 0x0
#define EC_GPIO_1_EDGE_TYPE "NONE"
#define EC_GPIO_1_IRQ_TYPE "NONE"
#define EC_GPIO_1_FREQ 60000000

/*
 * Macros for device 'EC_GPIO_2', class 'altera_avalon_pio'
 * The macros are prefixed with 'EC_GPIO_2_'.
 * The prefix is the slave descriptor.
 */
#define EC_GPIO_2_COMPONENT_TYPE altera_avalon_pio
#define EC_GPIO_2_COMPONENT_NAME EC_GPIO_2
#define EC_GPIO_2_BASE 0x880c000
#define EC_GPIO_2_SPAN 16
#define EC_GPIO_2_END 0x880c00f
#define EC_GPIO_2_DO_TEST_BENCH_WIRING 0
#define EC_GPIO_2_DRIVEN_SIM_VALUE 0x0
#define EC_GPIO_2_HAS_TRI 0
#define EC_GPIO_2_HAS_OUT 1
#define EC_GPIO_2_HAS_IN 1
#define EC_GPIO_2_CAPTURE 0
#define EC_GPIO_2_BIT_CLEARING_EDGE_REGISTER 0
#define EC_GPIO_2_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EC_GPIO_2_DATA_WIDTH 32
#define EC_GPIO_2_RESET_VALUE 0x0
#define EC_GPIO_2_EDGE_TYPE "NONE"
#define EC_GPIO_2_IRQ_TYPE "NONE"
#define EC_GPIO_2_FREQ 60000000

/*
 * Macros for device 'nRESET_EXP', class 'altera_avalon_pio'
 * The macros are prefixed with 'NRESET_EXP_'.
 * The prefix is the slave descriptor.
 */
#define NRESET_EXP_COMPONENT_TYPE altera_avalon_pio
#define NRESET_EXP_COMPONENT_NAME nRESET_EXP
#define NRESET_EXP_BASE 0x880d000
#define NRESET_EXP_SPAN 16
#define NRESET_EXP_END 0x880d00f
#define NRESET_EXP_DO_TEST_BENCH_WIRING 0
#define NRESET_EXP_DRIVEN_SIM_VALUE 0x0
#define NRESET_EXP_HAS_TRI 0
#define NRESET_EXP_HAS_OUT 1
#define NRESET_EXP_HAS_IN 0
#define NRESET_EXP_CAPTURE 0
#define NRESET_EXP_BIT_CLEARING_EDGE_REGISTER 0
#define NRESET_EXP_BIT_MODIFYING_OUTPUT_REGISTER 0
#define NRESET_EXP_DATA_WIDTH 1
#define NRESET_EXP_RESET_VALUE 0x0
#define NRESET_EXP_EDGE_TYPE "NONE"
#define NRESET_EXP_IRQ_TYPE "NONE"
#define NRESET_EXP_FREQ 60000000

/*
 * Macros for device 'EXP_PRESENT', class 'altera_avalon_pio'
 * The macros are prefixed with 'EXP_PRESENT_'.
 * The prefix is the slave descriptor.
 */
#define EXP_PRESENT_COMPONENT_TYPE altera_avalon_pio
#define EXP_PRESENT_COMPONENT_NAME EXP_PRESENT
#define EXP_PRESENT_BASE 0x880e000
#define EXP_PRESENT_SPAN 16
#define EXP_PRESENT_END 0x880e00f
#define EXP_PRESENT_DO_TEST_BENCH_WIRING 0
#define EXP_PRESENT_DRIVEN_SIM_VALUE 0x0
#define EXP_PRESENT_HAS_TRI 0
#define EXP_PRESENT_HAS_OUT 0
#define EXP_PRESENT_HAS_IN 1
#define EXP_PRESENT_CAPTURE 0
#define EXP_PRESENT_BIT_CLEARING_EDGE_REGISTER 0
#define EXP_PRESENT_BIT_MODIFYING_OUTPUT_REGISTER 0
#define EXP_PRESENT_DATA_WIDTH 1
#define EXP_PRESENT_RESET_VALUE 0x0
#define EXP_PRESENT_EDGE_TYPE "NONE"
#define EXP_PRESENT_IRQ_TYPE "NONE"
#define EXP_PRESENT_FREQ 60000000

/*
 * Macros for device 'temp_sense_spi', class 'altera_avalon_spi'
 * The macros are prefixed with 'TEMP_SENSE_SPI_'.
 * The prefix is the slave descriptor.
 */
#define TEMP_SENSE_SPI_COMPONENT_TYPE altera_avalon_spi
#define TEMP_SENSE_SPI_COMPONENT_NAME temp_sense_spi
#define TEMP_SENSE_SPI_BASE 0x880f000
#define TEMP_SENSE_SPI_SPAN 32
#define TEMP_SENSE_SPI_END 0x880f01f
#define TEMP_SENSE_SPI_IRQ 12
#define TEMP_SENSE_SPI_DATABITS 16
#define TEMP_SENSE_SPI_DATAWIDTH 16
#define TEMP_SENSE_SPI_TARGETCLOCK 50000
#define TEMP_SENSE_SPI_CLOCKUNITS "Hz"
#define TEMP_SENSE_SPI_CLOCKMULT 1
#define TEMP_SENSE_SPI_NUMSLAVES 1
#define TEMP_SENSE_SPI_ISMASTER 1
#define TEMP_SENSE_SPI_CLOCKPOLARITY 0
#define TEMP_SENSE_SPI_CLOCKPHASE 0
#define TEMP_SENSE_SPI_LSBFIRST 0
#define TEMP_SENSE_SPI_EXTRADELAY 0
#define TEMP_SENSE_SPI_INSERT_SYNC 0
#define TEMP_SENSE_SPI_SYNC_REG_DEPTH 2
#define TEMP_SENSE_SPI_TARGETSSDELAY "0.0"
#define TEMP_SENSE_SPI_DELAYUNITS "ns"
#define TEMP_SENSE_SPI_DELAYMULT "1.0E-9"
#define TEMP_SENSE_SPI_PREFIX "spi_"

/*
 * Macros for device 'mobile_ddr_sdram', class 'mtx_avalon_sdram'
 * The macros are prefixed with 'MOBILE_DDR_SDRAM_'.
 * The prefix is the slave descriptor.
 */
#define MOBILE_DDR_SDRAM_COMPONENT_TYPE mtx_avalon_sdram
#define MOBILE_DDR_SDRAM_COMPONENT_NAME mobile_ddr_sdram
#define MOBILE_DDR_SDRAM_BASE 0x10000000
#define MOBILE_DDR_SDRAM_SPAN 67108864
#define MOBILE_DDR_SDRAM_END 0x13ffffff


#endif /* _ALTERA_BEMICRO_SDK_H_ */
